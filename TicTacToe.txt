//TIC TAC TOE
//Created By: Stephen Walker
//February 23, 2011


#include <iostream>
#include <sstream>
#include <stdlib.h>
#include <string>

using namespace std;

int board[3][3]; //Tic Tac Toe board
bool isWon = false;

//Will display a board containing X's and O's
//Numbers in a position signifies an open space
void displayBoard() {
	for (int i = 0; i < 3; i++) {
		for (int j = 0; j < 3; j++) {
			cout << "[";

			if (board[i][j] == 0)
				cout << 1+3*i+j;
			else if (board[i][j] == -1)
				cout << "O";
			else
				cout << "X";

			cout << "] ";
		}
		cout << endl;
	}
	cout <<endl;
}

//Sets up a clear board
void initializeBoard()
{
	for (int i = 0; i < 3; i++)
		for (int j = 0; j < 3; j++)
			board[i][j] = 0;
	displayBoard();
}

//Prompts user to place a mark.
//Does some basic error checking
void getMove() {
	int value;
	int bRow=0;
	int bCol=0;
	bool isValid = false;
	string safeValue;

	while (!isValid)
	{
		value = 0;
		cout << "Enter the integer value of an open space where you would like to move: ";
		getline(cin, safeValue);
		stringstream(safeValue) >> value;

		bRow = (value-1)/3;
		bCol = (value-1)%3;
		
		if (value > 0 && value < 10 && board[bRow][bCol] == 0)
		{
			isValid = true;
			board[bRow][bCol] = 1;
		}
		else
			cout << "Please enter a VALID position!" << endl;
	}
}

//Calculates compter's move.
//On the computer's first move it will try to either:
// 1. Take Center
// 2. Take a corner

//Afterwards, it will always block a possible win by the
//user or take the win (wins are prioritized). On the computer's second turn
//there are certain types of situations that are checked for
//that would lead to a guaranteed win by the user.

void computerMove(const int ctr) {
	int checkValueRow = 0;
	int checkValueCol = 0;
	int potential[8] = {0,0,0,0,0,0,0,0};
	int zeroValue[8] = {0,0,0,0,0,0,0,0};
	bool madeMove = false;

	//Computer's First Move
	if (ctr==1)
	{
		if (board[1][1] == 0) 
			board[1][1] = -1;
		else 
			board[0][0] = -1;
	}
	//Calculates Computers moves
	else
	{
		//Checks Rows and Columns for potential Blocks or Wins
		for (int i = 0; i < 3; i++)
		{
			for (int j = 0; j < 3; j++)
			{
				//Checks Rows
				if (board[i][j] == 0)
					zeroValue[i] = j;
				else
					checkValueRow += board[i][j];

				//Checks Columns
				if (board[j][i] == 0)
					zeroValue[i+3] = j;
				else
					checkValueCol += board[j][i];
			}

			potential[i] = checkValueRow;
			potential[i+3] = checkValueCol;
			checkValueRow = 0;
			checkValueCol = 0;
		}
		
		//Checks Diagonals for potential Blocks or Wins
	
		for(int i = 0; i < 3; i++)
		{
			if (board[i][i] == 0)
				zeroValue[6] = i;
			else
				checkValueRow += board[i][i];
		}

		potential[6] = checkValueRow;
		checkValueRow = 0; 

		for(int i = 0; i < 3; i++)
		{
			if (board[i][2-i] == 0)
				zeroValue[7] = i;
			else
				checkValueRow += board[i][2-i];
		}

		potential[7] = checkValueRow;
		checkValueRow = 0;
	
		//Checks for and takes a win
		for (int i = 0; i < 8; i++)
		{
			if (potential[i] == -2)
			{
				if (i<=2)
					board[i][zeroValue[i]] = -1;
				else if (i<=5)
					board[zeroValue[i]][i-3] = -1;
				else if (i == 6)
					board[zeroValue[i]][zeroValue[i]] = -1;
				else
					board[zeroValue[i]][2-zeroValue[i]] = -1;
				
				isWon = true;
				madeMove = true;
			}
			if (madeMove)
				break;
		}
		//Checks for and prevents a win for the user
		if (!madeMove) {
			for (int i = 0; i < 8; i++)
			{
				if (potential[i] == 2)
				{
					if (i<=2)
						board[i][zeroValue[i]] = -1;
					else if (i<=5)
						board[zeroValue[i]][i-3] = -1;
					else if (i == 6)
						board[zeroValue[i]][zeroValue[i]] = -1;
					else 
						board[zeroValue[i]][2-zeroValue[i]] = -1;
					
					madeMove = true;
				}
				if (madeMove)
					break;
			}
		}
		
	
		if (!madeMove)
		{
			if ((potential[1]==potential[6] || potential[1]==potential[7]) && board[0][1] == 0)
				board[0][1] = -1;
			else if (potential[0]==potential[3] && board[0][0]==0)
				board[0][0] = -1;
			else if ((potential[2]==potential[3]==0 || potential[0]==potential[5]==1) && board[2][0]==0)
				board[2][0] = -1;
			else if ((potential[0]==potential[5] || potential[2]==potential[3]==1) && board[0][2]==0)
				board[0][2] = -1;
			else if (potential[2]==potential[5] && board[2][2]==0)
				board[2][2] = -1;
			else
			{
				for (int i = 0; i < 3; i++)
				{
					for (int j = 0; j < 3; j++)
					{
						if (board[i][j]==0)
						{
							board[i][j] = -1;
							madeMove = true;
						}
						if (madeMove)
							break;
					}
					if (madeMove)
						break;
				}
			}
		}

	}
}

int main() {


	int ctr = 0; //How many turns have elapsed?
	             //This will influence how the computer makes its move
	
	initializeBoard(); //Sets up a clear board

	while (!isWon && ctr < 9) //Continue game mechanics until either
	{              //player or computer wins
		getMove(); //gets player's move
		ctr++;
		if (ctr < 9)
			computerMove(ctr); //calculates computer's move
		ctr++;
		displayBoard();
	}

	if (isWon)
		cout << "Computer has won!";
	else if (ctr > 9)
		cout << "Cats Game!";
	string a;
	cin >> a;
	return 0;
}







